交互
1、获取题目信息    
	1、棋盘大小  宽度
	2、资源路径  资源帧数  动画播放速度
	3、碎片被拆成几块（每一大块用数组标识）   已经存在的碎块（已知条件）

2、提示
	1、

3、过关的通知

前端逻辑
	1、获取题目之后，生成棋盘
	2、按照被拆出的块数生成几个大节点  每个大节点按照


生成逻辑
	1、分成几个大块，每个大块由数个小块组成
	2、大块的锚点，是组成他的第一个小块的左下角那个点
	3、大块的坐标系是相对于棋盘来说的，棋盘的左下角为远点
	4、小块的坐标系是相对于大块的锚点来说的


操作逻辑
	1、点击碎片时 ： 碎片要居于最上层  
	2、拖动时 ： 碎片跟着动，并且要以触点为中心点移动，不能以大块的锚点
		所以
			1、在大块内点击的时候，计算出点击的点距离锚点的X,Y坐标，作为移动向量偏差值vec1
			2、拖动时，设置大块的坐标为 当前坐标减去vec1
	3、放手时 ： 
		1、在棋盘里面放手（用大块的坐标模除格子的宽和高，如果和某一个棋盘的节点误差在10-20以内 可以判定为已经接近那个点进入下面的判断）
			1、棋盘该形状的是空的  可以吸进去
			2、棋盘该形状位置内有格子被占用  不能吸进去
				所以 
					1、棋盘得有一个属性，代表每一个小格子的被占用与否（注:bbb）
					2、每一个大块的锚点落在棋盘的哪个点，就要得出自己的子节点所对应的棋盘的点，并且由于后期大块需要旋转，这个值应该每次通过遍历子节点算出来
						对于2中的算法：{
							1、先得到每一个子节点应该在的棋盘的坐标(由锚点真实坐标加上子节点相对锚点的相对向量) 如果大于最大值或小于0 直接返回
								(必须先算这个条件，否则会导致条件2无法准确计算)
							2、满足1的情况下  再算出每一个子节点在棋盘中对应的下标点  然后判断是否被占用 如果有 直接返回
							3、在满足1、2的情况下  讲大块的位置设置为临近点的位置  并将棋盘对应的被占用属性改为真    
								另外  每一个小节点都有一个属性 表示其应该对应的正确的棋盘下标  并将这个值赋给棋盘的另一个属性 (注:aaaa)
						}
				这里需要抽出两个方法   
					1、通过锚点的棋盘坐标 算出子节点的棋盘坐标
					2、通过大块的锚点棋盘下标 算出子节点的锚点棋盘下标
			3、每一次放手，如果成功的把大块放进了棋盘，都遍历一次棋盘的属性  
				检测 1、属性a  是否被占用位为真  
					 2、属性b  是否当前所在的子节点下标等于其所在的下标 见(注:aaaa) 

					 这个检测为 短路与判断     如果有判断为假  直接返回
					 	如果都走完了还没有返回   则表示游戏结束

		2、在棋盘外面放手
			在哪里放手就放手呗
			
	4、提示 ： 随便找一个没有放进棋盘的碎块，放到正确的位置
		1、原来正确的位置没有其他碎块   直接闪过去
		2、原来正确的位置被其他碎块占用    其他碎块移走到起始位置	